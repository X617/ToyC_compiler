# 1 "lib/lexer.mll"
 
open Parser
exception Error of string

let keywords = [
  ("int",      INT);
  ("void",     VOID);
  ("if",       IF);
  ("else",     ELSE);
  ("while",    WHILE);
  ("break",    BREAK);
  ("continue", CONTINUE);
  ("return",   RETURN);
]


# 19 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\229\255\230\255\231\255\232\255\233\255\
    \234\255\235\255\237\255\238\255\239\255\002\000\001\000\002\000\
    \003\000\030\000\031\000\079\000\154\000\095\000\254\255\255\255\
    \252\255\001\000\249\255\248\255\247\255\246\255\243\255\242\255\
    \004\000\253\255\254\255\011\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\028\000\028\000\011\000\
    \010\000\014\000\015\000\005\000\004\000\019\000\255\255\255\255\
    \255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\022\000\255\255\000\000\023\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\017\000\000\000\000\000\000\000\009\000\014\000\030\000\
    \008\000\007\000\010\000\012\000\003\000\011\000\035\000\021\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\036\000\004\000\016\000\018\000\015\000\029\000\
    \028\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\027\000\026\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\006\000\013\000\005\000\031\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\024\000\000\000\000\000\000\000\000\000\025\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\034\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\025\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\000\000\000\000\015\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\018\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\021\000\255\255\255\255\255\255\255\255\021\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\019\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\025\000\255\255\255\255\032\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 26 "lib/lexer.mll"
                    ( token lexbuf )
# 166 "lib/lexer.ml"

  | 1 ->
# 27 "lib/lexer.mll"
                   ( Lexing.new_line lexbuf; token lexbuf )
# 171 "lib/lexer.ml"

  | 2 ->
# 30 "lib/lexer.mll"
                   ( token lexbuf )
# 176 "lib/lexer.ml"

  | 3 ->
# 31 "lib/lexer.mll"
                   ( comment lexbuf )
# 181 "lib/lexer.ml"

  | 4 ->
let
# 34 "lib/lexer.mll"
              num
# 187 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 34 "lib/lexer.mll"
                   ( INT_LITERAL (int_of_string num) )
# 191 "lib/lexer.ml"

  | 5 ->
let
# 37 "lib/lexer.mll"
             id
# 197 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "lib/lexer.mll"
                   (
      try List.assoc id keywords
      with Not_found -> ID id
    )
# 204 "lib/lexer.ml"

  | 6 ->
# 43 "lib/lexer.mll"
                             ( EQ )
# 209 "lib/lexer.ml"

  | 7 ->
# 44 "lib/lexer.mll"
                             ( NEQ )
# 214 "lib/lexer.ml"

  | 8 ->
# 45 "lib/lexer.mll"
                             ( LE )
# 219 "lib/lexer.ml"

  | 9 ->
# 46 "lib/lexer.mll"
                             ( GE )
# 224 "lib/lexer.ml"

  | 10 ->
# 47 "lib/lexer.mll"
                             ( LT )
# 229 "lib/lexer.ml"

  | 11 ->
# 48 "lib/lexer.mll"
                             ( GT )
# 234 "lib/lexer.ml"

  | 12 ->
# 50 "lib/lexer.mll"
                             ( AND )
# 239 "lib/lexer.ml"

  | 13 ->
# 51 "lib/lexer.mll"
                             ( OR )
# 244 "lib/lexer.ml"

  | 14 ->
# 52 "lib/lexer.mll"
                             ( NOT )
# 249 "lib/lexer.ml"

  | 15 ->
# 54 "lib/lexer.mll"
                             ( ASSIGN )
# 254 "lib/lexer.ml"

  | 16 ->
# 55 "lib/lexer.mll"
                             ( PLUS )
# 259 "lib/lexer.ml"

  | 17 ->
# 56 "lib/lexer.mll"
                             ( MINUS )
# 264 "lib/lexer.ml"

  | 18 ->
# 57 "lib/lexer.mll"
                             ( TIMES )
# 269 "lib/lexer.ml"

  | 19 ->
# 58 "lib/lexer.mll"
                             ( DIVIDE )
# 274 "lib/lexer.ml"

  | 20 ->
# 59 "lib/lexer.mll"
                             ( MOD )
# 279 "lib/lexer.ml"

  | 21 ->
# 62 "lib/lexer.mll"
                             ( LPAREN )
# 284 "lib/lexer.ml"

  | 22 ->
# 63 "lib/lexer.mll"
                             ( RPAREN )
# 289 "lib/lexer.ml"

  | 23 ->
# 64 "lib/lexer.mll"
                             ( LBRACE )
# 294 "lib/lexer.ml"

  | 24 ->
# 65 "lib/lexer.mll"
                             ( RBRACE )
# 299 "lib/lexer.ml"

  | 25 ->
# 66 "lib/lexer.mll"
                             ( SEMI )
# 304 "lib/lexer.ml"

  | 26 ->
# 67 "lib/lexer.mll"
                             ( COMMA )
# 309 "lib/lexer.ml"

  | 27 ->
# 70 "lib/lexer.mll"
                             ( EOF )
# 314 "lib/lexer.ml"

  | 28 ->
# 79 "lib/lexer.mll"
                              ( raise (Error ("Unexpected character: " ^ Lexing.lexeme lexbuf)) )
# 319 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 32
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 91 "lib/lexer.mll"
                             ( token lexbuf )
# 331 "lib/lexer.ml"

  | 1 ->
# 92 "lib/lexer.mll"
                             ( raise (Error "Unterminated comment") )
# 336 "lib/lexer.ml"

  | 2 ->
# 93 "lib/lexer.mll"
                             ( comment lexbuf )
# 341 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

